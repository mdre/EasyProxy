// DSL Gradle 7.0
plugins {
    id 'java-library'
    // https://plugins.gradle.org/plugin/net.researchgate.release
    // id 'net.researchgate.release' version '2.8.1'
    // https://plugins.gradle.org/plugin/nu.studer.credentials
    id 'nu.studer.credentials' version '2.1'
    // https://plugins.gradle.org/plugin/io.codearte.nexus-staging
    // id 'io.codearte.nexus-staging' version '0.30.0'

    //https://github.com/gradle-nexus/publish-plugin/
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"

    id 'maven-publish'
    id 'signing'
}

def sonatypeUsername = credentials.sonatypeUser
def sonatypePassword = credentials.sonatypePassword

// para publicar:
//  gradle publishToSonatype closeAndReleaseSonatypeStagingRepository sabn


// desactivo la generación de javadoc en los proyectos que tengan la tarea
javadoc.enabled = true

println "***************************************************************"
println "SISTEMA: " + name
println "VERSION: " + version
println "***************************************************************"
import java.text.SimpleDateFormat
def getCurrentTimestamp ()
{
    Date today = new Date ()
    SimpleDateFormat df = new SimpleDateFormat ("dd/MM/yyyy hh:mm:ss")
    return df.format (today)
}

println getCurrentTimestamp()
println "---------------------------------------------------------------"
// incrementar automáticamente el buildNumber
task autoBuildNumber {
    doFirst {
        println "autobuild number....."
        File propertiesFile = new File('gradle.properties')
        def lines = propertiesFile.readLines()

        PrintWriter printWriter = new PrintWriter(propertiesFile)
        String versionNumber = ""
        lines.each {String line ->
            if (line.startsWith("version") ){
                versionNumber = line.tokenize("=")[1]
                String[] versionParts = versionNumber.tokenize(".")
                // recalcular el build 
                versionNumber = versionParts[0]+\
                                '.'+versionParts[1]+\
                                '.'+versionParts[2]+
                                '.'+( versionParts.length==4 ? (versionParts[3].toInteger()+1).toString():"1")
                
                line = "version="+versionNumber
                //                println line
            }
            printWriter.println(line)
        }
        printWriter.close()

    }
}
// saltar autoBuildNumber
// agregar esta tarea para que no se incremente el valor.
task sabn{}

// agregar la dependencia solo si no se trata de un release
if (! (project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("release")
       || project.gradle.startParameter.taskNames.join(",").toLowerCase().contains("sabn")) 
   ) {
    build.configure{dependsOn autoBuildNumber} 
}


repositories {
    mavenLocal()
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    implementation 'org.ow2.asm:asm:9.4'
    implementation 'org.ow2.asm:asm-util:9.4'
    implementation 'org.burningwave:core:12.62.5'
    testImplementation "junit:junit:[4,)"
}


task runFile(dependsOn: 'classes',type:JavaExec) {
    
    jvmArgs += ""
    if (project.hasProperty('mainClass')) {
        main = mainClass
        classpath = sourceSets.main.runtimeClasspath
        standardOutput = System.out
        errorOutput = System.err
        //jvmArgs += "-javaagent:${project.odbogmAgentPath}"
    }
    
}


test {
    dependsOn 
    jvmArgs '-Djdk.attach.allowAttachSelf=true --add-opens java.base/java.lang=ALL-UNNAMED'
    
    outputs.upToDateWhen { false }
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
 
        // Or we use events method:
        // events 'standard_out', 'standard_error'
 
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}


jar {
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenPublication }
        rename ".*", "pom.xml"
    }
    
    into("META-INF/maven/$project.group/$project.name") {
        File pomProperites = new File("pom.properties")
        pomProperites.write("version:"+version+"\n")
        pomProperites << "groupId: $project.group\n"
        pomProperites << "artifactId: $artifactId\n"
        
        from("pom.properties")
    }
        
}


java {
    withJavadocJar()
    withSourcesJar()
}

//create a single Jar with all dependencies - DSL 7.0
task fatJar(type: Jar) {
    baseName = project.name + '-all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

nexusPublishing {
    repositories {
        //sonatype()
        sonatype {
            username = sonatypeUsername
            password = sonatypePassword
        }
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            //artifactId = 'my-library'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = "$artifactId" 
                packaging = 'jar'
                // optionally artifactId can be defined here 
                description = "$title"
                url = 'https://github.com/mdre/EasyProxy'

                // properties = [
                //     myProp: "value",
                //     "prop.with.dots": "anotherValue"
                // ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'mdre'
                        name = 'Marcelo D. RE'
                        email = 'marcelo.re@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/mdre/EasyProxy.git'
                    developerConnection = 'scm:git:ssh://github.com/mdre/EasyProxy.git'
                    url = 'https://github.com/mdre/EasyProxy'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
